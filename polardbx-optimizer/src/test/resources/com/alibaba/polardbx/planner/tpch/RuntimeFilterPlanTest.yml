#测试生成bloomfilter
- sql: |
    /*+TDDL:ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey") ENABLE_MPP=true*/select * from part, supplier where p_partkey=s_nationkey
  plan: |
    hashjoin(condition="p_partkey = s_nationkey", type="inner")
      logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey`, `p_name`, `p_mfgr`, `p_brand`, `p_type`, `p_size`, `p_container`, `p_retailprice`, `p_comment` from `part` as `part` where (bloomfilter(?, ?, ?, `p_partkey`))")
      exchange(distribution=broadcast, collation=[])
        runtimefilterbuilder(condition="runtime_filter_builder_[0](s_nationkey)")
          logicalview(tables="[0000-0003].supplier_[00-15]", shardcount=16, sql="select `s_suppkey`, `s_name`, `s_address`, `s_nationkey`, `s_phone`, `s_acctbal`, `s_comment` from `supplier` as `supplier`")

#测试生成bloomfilter，并且下推给mysql
- sql: |
    /*+TDDL:ENABLE_PUSH_RUNTIME_FILTER_SCAN=true ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey") ENABLE_MPP=true*/
    select * from part, supplier where p_partkey=s_nationkey
  plan: |
    HashJoin(condition="p_partkey = s_nationkey", type="inner")
      LogicalView(tables="[0000-0003].part_[00-15]", shardCount=16, sql="SELECT `p_partkey`, `p_name`, `p_mfgr`, `p_brand`, `p_type`, `p_size`, `p_container`, `p_retailprice`, `p_comment` FROM `part` AS `part` WHERE (BLOOMFILTER(?, ?, ?, `p_partkey`))")
      Exchange(distribution=broadcast, collation=[])
        RuntimeFilterBuilder(condition="RUNTIME_FILTER_BUILDER_[0](s_nationkey)")
          LogicalView(tables="[0000-0003].supplier_[00-15]", shardCount=16, sql="SELECT `s_suppkey`, `s_name`, `s_address`, `s_nationkey`, `s_phone`, `s_acctbal`, `s_comment` FROM `supplier` AS `supplier`")

#测试生成bloomfilter
- sql: |
    /*+TDDL:ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey") ENABLE_MPP=true*/
    select * from (select p_partkey, s_address from part, supplier where p_partkey=s_nationkey) as t, part where t.p_partkey=part.p_partkey
  plan: |
    project(p_partkey="p_partkey0", s_address="s_address", p_partkey0="p_partkey", p_name="p_name", p_mfgr="p_mfgr", p_brand="p_brand", p_type="p_type", p_size="p_size", p_container="p_container", p_retailprice="p_retailprice", p_comment="p_comment")
      hashjoin(condition="p_partkey = p_partkey", type="inner")
        exchange(distribution=hash[0], collation=[])
          logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey`, `p_name`, `p_mfgr`, `p_brand`, `p_type`, `p_size`, `p_container`, `p_retailprice`, `p_comment` from `part` as `part`")
        project(s_address="s_address", s_nationkey="s_nationkey", p_partkey="p_partkey")
          hashjoin(condition="p_partkey = s_nationkey", type="inner")
            exchange(distribution=hash[0], collation=[])
              logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey` from `part` as `part` where (bloomfilter(?, ?, ?, `p_partkey`))")
            exchange(distribution=hash[1], collation=[])
              runtimefilterbuilder(condition="runtime_filter_builder_[0](s_nationkey)")
                logicalview(tables="[0000-0003].supplier_[00-15]", shardcount=16, sql="select `s_address`, `s_nationkey` from `supplier` as `supplier`")

#测试生成bloomfilter，并且下推给mysql
- sql: |
    /*+TDDL: ENABLE_PUSH_RUNTIME_FILTER_SCAN=true ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey") ENABLE_MPP=true*/
    select * from (select p_partkey, s_address from part, supplier where p_partkey=s_nationkey) as t, part where t.p_partkey=part.p_partkey
  plan: |
    project(p_partkey="p_partkey0", s_address="s_address", p_partkey0="p_partkey", p_name="p_name", p_mfgr="p_mfgr", p_brand="p_brand", p_type="p_type", p_size="p_size", p_container="p_container", p_retailprice="p_retailprice", p_comment="p_comment")
      hashjoin(condition="p_partkey = p_partkey", type="inner")
        exchange(distribution=hash[0], collation=[])
          logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey`, `p_name`, `p_mfgr`, `p_brand`, `p_type`, `p_size`, `p_container`, `p_retailprice`, `p_comment` from `part` as `part`")
        project(s_address="s_address", s_nationkey="s_nationkey", p_partkey="p_partkey")
          hashjoin(condition="p_partkey = s_nationkey", type="inner")
            exchange(distribution=hash[0], collation=[])
              logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey` from `part` as `part` where (bloomfilter(?, ?, ?, `p_partkey`))")
            exchange(distribution=hash[1], collation=[])
              runtimefilterbuilder(condition="runtime_filter_builder_[0](s_nationkey)")
                logicalview(tables="[0000-0003].supplier_[00-15]", shardcount=16, sql="select `s_address`, `s_nationkey` from `supplier` as `supplier`")

#测试生成bloomfilter，透传给Join Probe，并且下继续推给mysql
- sql: |
    /*+TDDL:ENABLE_OPTIMIZE_SCAN_WITH_RUNTIME_FILTER=true ENABLE_PUSH_RUNTIME_FILTER_SCAN=true ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey") ENABLE_MPP=true*/
    select * from (select p_partkey, s_address from part, supplier where p_partkey=s_nationkey) as t, part where t.p_partkey=part.p_partkey
  plan: |
    project(p_partkey="p_partkey0", s_address="s_address", p_partkey0="p_partkey", p_name="p_name", p_mfgr="p_mfgr", p_brand="p_brand", p_type="p_type", p_size="p_size", p_container="p_container", p_retailprice="p_retailprice", p_comment="p_comment")
      hashjoin(condition="p_partkey = p_partkey", type="inner")
        exchange(distribution=hash[0], collation=[])
          logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey`, `p_name`, `p_mfgr`, `p_brand`, `p_type`, `p_size`, `p_container`, `p_retailprice`, `p_comment` from `part` as `part`")
        project(s_address="s_address", s_nationkey="s_nationkey", p_partkey="p_partkey")
          hashjoin(condition="p_partkey = s_nationkey", type="inner")
            exchange(distribution=hash[0], collation=[])
              logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey` from `part` as `part` where (bloomfilter(?, ?, ?, `p_partkey`))")
            exchange(distribution=hash[1], collation=[])
              runtimefilterbuilder(condition="runtime_filter_builder_[0](s_nationkey)")
                logicalview(tables="[0000-0003].supplier_[00-15]", shardcount=16, sql="select `s_address`, `s_nationkey` from `supplier` as `supplier`")

#测试生成bloomfilter，透传给Join Probe和Build，并且下继续推给mysql
- sql: |
    /*+TDDL:ENABLE_RUNTIME_FILTER_INTO_BUILD_SIDE=true ENABLE_OPTIMIZE_SCAN_WITH_RUNTIME_FILTER=true ENABLE_PUSH_RUNTIME_FILTER_SCAN=true ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey") ENABLE_MPP=true*/
    select * from (select p_partkey, s_address from part, supplier where p_partkey=s_nationkey) as t, part where t.p_partkey=part.p_partkey
  plan: |
    project(p_partkey="p_partkey0", s_address="s_address", p_partkey0="p_partkey", p_name="p_name", p_mfgr="p_mfgr", p_brand="p_brand", p_type="p_type", p_size="p_size", p_container="p_container", p_retailprice="p_retailprice", p_comment="p_comment")
      hashjoin(condition="p_partkey = p_partkey", type="inner")
        exchange(distribution=hash[0], collation=[])
          logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey`, `p_name`, `p_mfgr`, `p_brand`, `p_type`, `p_size`, `p_container`, `p_retailprice`, `p_comment` from `part` as `part`")
        project(s_address="s_address", s_nationkey="s_nationkey", p_partkey="p_partkey")
          hashjoin(condition="p_partkey = s_nationkey", type="inner")
            exchange(distribution=hash[0], collation=[])
              logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey` from `part` as `part` where (bloomfilter(?, ?, ?, `p_partkey`))")
            exchange(distribution=hash[1], collation=[])
              runtimefilterbuilder(condition="runtime_filter_builder_[0](s_nationkey)")
                logicalview(tables="[0000-0003].supplier_[00-15]", shardcount=16, sql="select `s_address`, `s_nationkey` from `supplier` as `supplier`")

#测试生成bloomfilter，三表join, join key都一样，测试filter-build merge
- sql: |
    /*+TDDL:ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey") ENABLE_MPP=true*/
    select * from (select p_partkey, s_address from part, supplier where p_partkey=s_nationkey) as t, partsupp where t.p_partkey=partsupp.ps_suppkey
  plan: |
    project(p_partkey="p_partkey", s_address="s_address", ps_partkey="ps_partkey", ps_suppkey="ps_suppkey", ps_availqty="ps_availqty", ps_supplycost="ps_supplycost", ps_comment="ps_comment")
      hashjoin(condition="p_partkey = ps_suppkey", type="inner")
        project(s_address="s_address", s_nationkey="s_nationkey", p_partkey="p_partkey")
          hashjoin(condition="p_partkey = s_nationkey", type="inner")
            exchange(distribution=hash[0], collation=[])
              logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey` from `part` as `part` where (bloomfilter(?, ?, ?, `p_partkey`))")
            exchange(distribution=hash[1], collation=[])
              runtimefilterbuilder(condition="runtime_filter_builder_[0](s_nationkey)")
                logicalview(tables="[0000-0003].supplier_[00-15]", shardcount=16, sql="select `s_address`, `s_nationkey` from `supplier` as `supplier`")
        exchange(distribution=hash[1], collation=[])
          logicalview(tables="[0000-0003].partsupp_[00-15]", shardcount=16, sql="select `ps_partkey`, `ps_suppkey`, `ps_availqty`, `ps_supplycost`, `ps_comment` from `partsupp` as `partsupp`")


#测试生成bloomfilter，三表join, join key都一样，测试filter-build merge
- sql: |
    /*+TDDL:ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey") ENABLE_MPP=true*/
    select * from (select p_partkey, s_address, s_nationkey from part, supplier where p_partkey=s_nationkey) as t, partsupp where t.s_nationkey=partsupp.ps_suppkey
  plan: |
    project(p_partkey="p_partkey", s_address="s_address", s_nationkey="s_nationkey", ps_partkey="ps_partkey", ps_suppkey="ps_suppkey", ps_availqty="ps_availqty", ps_supplycost="ps_supplycost", ps_comment="ps_comment")
      hashjoin(condition="ps_suppkey = s_nationkey", type="inner")
        project(s_address="s_address", s_nationkey="s_nationkey", p_partkey="p_partkey")
          hashjoin(condition="p_partkey = s_nationkey", type="inner")
            exchange(distribution=hash[0], collation=[])
              logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey` from `part` as `part` where (bloomfilter(?, ?, ?, `p_partkey`))")
            exchange(distribution=hash[1], collation=[])
              runtimefilterbuilder(condition="runtime_filter_builder_[0](s_nationkey)")
                logicalview(tables="[0000-0003].supplier_[00-15]", shardcount=16, sql="select `s_address`, `s_nationkey` from `supplier` as `supplier`")
        exchange(distribution=hash[1], collation=[])
          logicalview(tables="[0000-0003].partsupp_[00-15]", shardcount=16, sql="select `ps_partkey`, `ps_suppkey`, `ps_availqty`, `ps_supplycost`, `ps_comment` from `partsupp` as `partsupp`")


#测试生成bloomfilter，三表join, join key不一样，测试filter-build merge
- sql: |
    /*+TDDL:ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey,p_size,ps_suppkey") ENABLE_MPP=true*/
    select * from (select p_partkey, s_address, p_size from part, supplier where p_partkey=s_nationkey) as t, partsupp where t.p_size=partsupp.ps_suppkey
  plan: |
    project(p_partkey="p_partkey", s_address="s_address", p_size="p_size", ps_partkey="ps_partkey", ps_suppkey="ps_suppkey", ps_availqty="ps_availqty", ps_supplycost="ps_supplycost", ps_comment="ps_comment")
      hashjoin(condition="ps_suppkey = p_size", type="inner")
        exchange(distribution=hash[3], collation=[])
          project(s_address="s_address", s_nationkey="s_nationkey", p_partkey="p_partkey", p_size="p_size")
            hashjoin(condition="p_partkey = s_nationkey", type="inner")
              logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey`, `p_size` from `part` as `part` where (bloomfilter(?, ?, ?, `p_partkey`))")
              exchange(distribution=broadcast, collation=[])
                runtimefilterbuilder(condition="runtime_filter_builder_[0](s_nationkey)")
                  logicalview(tables="[0000-0003].supplier_[00-15]", shardcount=16, sql="select `s_address`, `s_nationkey` from `supplier` as `supplier`")
        exchange(distribution=hash[1], collation=[])
          logicalview(tables="[0000-0003].partsupp_[00-15]", shardcount=16, sql="select `ps_partkey`, `ps_suppkey`, `ps_availqty`, `ps_supplycost`, `ps_comment` from `partsupp` as `partsupp`")


#测试生成bloomfilter(left join)
- sql: |
    /*+TDDL:ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey") ENABLE_MPP=true*/
    select * from part left join supplier on p_partkey=s_nationkey
  plan: |
    HashJoin(condition="p_partkey = s_nationkey", type="left")
      LogicalView(tables="[0000-0003].part_[00-15]", shardCount=16, sql="SELECT `p_partkey`, `p_name`, `p_mfgr`, `p_brand`, `p_type`, `p_size`, `p_container`, `p_retailprice`, `p_comment` FROM `part` AS `part`")
      Exchange(distribution=broadcast, collation=[])
        LogicalView(tables="[0000-0003].supplier_[00-15]", shardCount=16, sql="SELECT `s_suppkey`, `s_name`, `s_address`, `s_nationkey`, `s_phone`, `s_acctbal`, `s_comment` FROM `supplier` AS `supplier`")

#测试生成bloomfilter(left join)
- sql: |
    /*+TDDL:ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey") ENABLE_MPP=true*/
    select * from (select p_partkey, s_address from part, supplier where p_partkey=s_nationkey) as t left join part on t.p_partkey=part.p_partkey
  plan: |
    project(p_partkey="p_partkey0", s_address="s_address", p_partkey0="p_partkey", p_name="p_name", p_mfgr="p_mfgr", p_brand="p_brand", p_type="p_type", p_size="p_size", p_container="p_container", p_retailprice="p_retailprice", p_comment="p_comment")
      hashjoin(condition="p_partkey = p_partkey", type="right", build="right")
        exchange(distribution=hash[0], collation=[])
          logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey`, `p_name`, `p_mfgr`, `p_brand`, `p_type`, `p_size`, `p_container`, `p_retailprice`, `p_comment` from `part` as `part`")
        project(s_address="s_address", s_nationkey="s_nationkey", p_partkey="p_partkey")
          hashjoin(condition="p_partkey = s_nationkey", type="inner")
            exchange(distribution=hash[0], collation=[])
              logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey` from `part` as `part` where (bloomfilter(?, ?, ?, `p_partkey`))")
            exchange(distribution=hash[1], collation=[])
              runtimefilterbuilder(condition="runtime_filter_builder_[0](s_nationkey)")
                logicalview(tables="[0000-0003].supplier_[00-15]", shardcount=16, sql="select `s_address`, `s_nationkey` from `supplier` as `supplier`")

##测试生成bloomfilter，并且下推给mysql(left join)
- sql: |
    /*+TDDL: ENABLE_PUSH_RUNTIME_FILTER_SCAN=true ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey") ENABLE_MPP=true*/
    select * from (select p_partkey, s_address from part, supplier where p_partkey=s_nationkey) as t left join part on t.p_partkey=part.p_partkey
  plan: |
    project(p_partkey="p_partkey0", s_address="s_address", p_partkey0="p_partkey", p_name="p_name", p_mfgr="p_mfgr", p_brand="p_brand", p_type="p_type", p_size="p_size", p_container="p_container", p_retailprice="p_retailprice", p_comment="p_comment")
      hashjoin(condition="p_partkey = p_partkey", type="right", build="right")
        exchange(distribution=hash[0], collation=[])
          logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey`, `p_name`, `p_mfgr`, `p_brand`, `p_type`, `p_size`, `p_container`, `p_retailprice`, `p_comment` from `part` as `part`")
        project(s_address="s_address", s_nationkey="s_nationkey", p_partkey="p_partkey")
          hashjoin(condition="p_partkey = s_nationkey", type="inner")
            exchange(distribution=hash[0], collation=[])
              logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey` from `part` as `part` where (bloomfilter(?, ?, ?, `p_partkey`))")
            exchange(distribution=hash[1], collation=[])
              runtimefilterbuilder(condition="runtime_filter_builder_[0](s_nationkey)")
                logicalview(tables="[0000-0003].supplier_[00-15]", shardcount=16, sql="select `s_address`, `s_nationkey` from `supplier` as `supplier`")

##测试生成bloomfilter，透传给Join Probe，并且下继续推给mysql(left join)
- sql: |
    /*+TDDL:ENABLE_OPTIMIZE_SCAN_WITH_RUNTIME_FILTER=true ENABLE_PUSH_RUNTIME_FILTER_SCAN=true ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey") ENABLE_MPP=true*/
    select * from (select p_partkey, s_address from part, supplier where p_partkey=s_nationkey) as t left join part on t.p_partkey=part.p_partkey
  plan: |
    project(p_partkey="p_partkey0", s_address="s_address", p_partkey0="p_partkey", p_name="p_name", p_mfgr="p_mfgr", p_brand="p_brand", p_type="p_type", p_size="p_size", p_container="p_container", p_retailprice="p_retailprice", p_comment="p_comment")
      hashjoin(condition="p_partkey = p_partkey", type="right", build="right")
        exchange(distribution=hash[0], collation=[])
          logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey`, `p_name`, `p_mfgr`, `p_brand`, `p_type`, `p_size`, `p_container`, `p_retailprice`, `p_comment` from `part` as `part`")
        project(s_address="s_address", s_nationkey="s_nationkey", p_partkey="p_partkey")
          hashjoin(condition="p_partkey = s_nationkey", type="inner")
            exchange(distribution=hash[0], collation=[])
              logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey` from `part` as `part` where (bloomfilter(?, ?, ?, `p_partkey`))")
            exchange(distribution=hash[1], collation=[])
              runtimefilterbuilder(condition="runtime_filter_builder_[0](s_nationkey)")
                logicalview(tables="[0000-0003].supplier_[00-15]", shardcount=16, sql="select `s_address`, `s_nationkey` from `supplier` as `supplier`")

##测试生成bloomfilter，透传给Join Probe和Build，并且下继续推给mysql(left join)
- sql: |
    /*+TDDL:ENABLE_RUNTIME_FILTER_INTO_BUILD_SIDE=true ENABLE_OPTIMIZE_SCAN_WITH_RUNTIME_FILTER=true ENABLE_PUSH_RUNTIME_FILTER_SCAN=true ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey") ENABLE_MPP=true*/
    select * from (select p_partkey, s_address from part, supplier where p_partkey=s_nationkey) as t left join part on t.p_partkey=part.p_partkey
  plan: |
    project(p_partkey="p_partkey0", s_address="s_address", p_partkey0="p_partkey", p_name="p_name", p_mfgr="p_mfgr", p_brand="p_brand", p_type="p_type", p_size="p_size", p_container="p_container", p_retailprice="p_retailprice", p_comment="p_comment")
      hashjoin(condition="p_partkey = p_partkey", type="right", build="right")
        exchange(distribution=hash[0], collation=[])
          logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey`, `p_name`, `p_mfgr`, `p_brand`, `p_type`, `p_size`, `p_container`, `p_retailprice`, `p_comment` from `part` as `part`")
        project(s_address="s_address", s_nationkey="s_nationkey", p_partkey="p_partkey")
          hashjoin(condition="p_partkey = s_nationkey", type="inner")
            exchange(distribution=hash[0], collation=[])
              logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey` from `part` as `part` where (bloomfilter(?, ?, ?, `p_partkey`))")
            exchange(distribution=hash[1], collation=[])
              runtimefilterbuilder(condition="runtime_filter_builder_[0](s_nationkey)")
                logicalview(tables="[0000-0003].supplier_[00-15]", shardcount=16, sql="select `s_address`, `s_nationkey` from `supplier` as `supplier`")

##测试生成bloomfilter，透传给Join Probe和Build，并且下继续推给mysql(right join)
- sql: |
    /*+TDDL:ENABLE_RUNTIME_FILTER_INTO_BUILD_SIDE=true ENABLE_OPTIMIZE_SCAN_WITH_RUNTIME_FILTER=true ENABLE_PUSH_RUNTIME_FILTER_SCAN=true ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey") ENABLE_MPP=true*/
    select * from (select p_partkey, s_address from part, supplier where p_partkey=s_nationkey) as t right join part on t.p_partkey=part.p_partkey
  plan: |
    hashjoin(condition="p_partkey = p_partkey", type="right")
      project(p_partkey="p_partkey", s_address="s_address")
        hashjoin(condition="p_partkey = s_nationkey", type="inner")
          exchange(distribution=hash[0], collation=[])
            logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey` from `part` as `part` where (bloomfilter(?, ?, ?, `p_partkey`))")
          exchange(distribution=hash[1], collation=[])
            runtimefilterbuilder(condition="runtime_filter_builder_[0](s_nationkey)")
              logicalview(tables="[0000-0003].supplier_[00-15]", shardcount=16, sql="select `s_address`, `s_nationkey` from `supplier` as `supplier`")
      exchange(distribution=hash[0], collation=[])
        logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey`, `p_name`, `p_mfgr`, `p_brand`, `p_type`, `p_size`, `p_container`, `p_retailprice`, `p_comment` from `part` as `part`")

#测试生成bloomfilter，三表join, join key都一样，测试filter-build merge(left join)
- sql: |
    /*+TDDL:ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey") ENABLE_MPP=true*/
    select * from (select p_partkey, s_address, s_nationkey from part, supplier where p_partkey=s_nationkey) as t left join partsupp on t.s_nationkey=partsupp.ps_suppkey
  plan: |
    project(p_partkey="p_partkey", s_address="s_address", s_nationkey="s_nationkey", ps_partkey="ps_partkey", ps_suppkey="ps_suppkey", ps_availqty="ps_availqty", ps_supplycost="ps_supplycost", ps_comment="ps_comment")
      hashjoin(condition="s_nationkey = ps_suppkey", type="right")
        exchange(distribution=hash[1], collation=[])
          logicalview(tables="[0000-0003].partsupp_[00-15]", shardcount=16, sql="select `ps_partkey`, `ps_suppkey`, `ps_availqty`, `ps_supplycost`, `ps_comment` from `partsupp` as `partsupp`")
        project(s_address="s_address", s_nationkey="s_nationkey", p_partkey="p_partkey")
          hashjoin(condition="p_partkey = s_nationkey", type="inner")
            exchange(distribution=hash[0], collation=[])
              logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey` from `part` as `part` where (bloomfilter(?, ?, ?, `p_partkey`))")
            exchange(distribution=hash[1], collation=[])
              runtimefilterbuilder(condition="runtime_filter_builder_[0](s_nationkey)")
                logicalview(tables="[0000-0003].supplier_[00-15]", shardcount=16, sql="select `s_address`, `s_nationkey` from `supplier` as `supplier`")

#测试生成bloomfilter，将bloom filter推到join以下
- sql: |
    /*+TDDL:ENABLE_RUNTIME_FILTER=true ENABLE_PUSH_RUNTIME_FILTER_SCAN=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("l_suppkey,ps_suppkey") ENABLE_RUNTIME_FILTER_INTO_BUILD_SIDE=true ENABLE_MPP=true*/
    select * from (select p_partkey, s_address, s_nationkey from part, supplier where p_partkey=s_nationkey) as t inner join (select l_suppkey, ps_suppkey, l_linenumber, l_quantity from partsupp inner join lineitem where partsupp.ps_suppkey = lineitem.l_suppkey) as t1 on t.s_nationkey=t1.ps_suppkey
  plan: |
    project(p_partkey="p_partkey", s_address="s_address", s_nationkey="s_nationkey", l_suppkey="l_suppkey", ps_suppkey="ps_suppkey", l_linenumber="l_linenumber", l_quantity="l_quantity")
      hashjoin(condition="l_suppkey = ps_suppkey", type="inner")
        filter(condition="bloomfilter(ps_suppkey)")
          hashjoin(condition="ps_suppkey = s_nationkey", type="inner")
            project(s_address="s_address", s_nationkey="s_nationkey", p_partkey="p_partkey")
              hashjoin(condition="p_partkey = s_nationkey", type="inner")
                exchange(distribution=hash[0], collation=[])
                  logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey` from `part` as `part` where (bloomfilter(?, ?, ?, `p_partkey`))")
                exchange(distribution=hash[1], collation=[])
                  runtimefilterbuilder(condition="runtime_filter_builder_[1](s_nationkey)")
                    logicalview(tables="[0000-0003].supplier_[00-15]", shardcount=16, sql="select `s_address`, `s_nationkey` from `supplier` as `supplier`")
            exchange(distribution=hash[0], collation=[])
              logicalview(tables="[0000-0003].partsupp_[00-15]", shardcount=16, sql="select `ps_suppkey` from `partsupp` as `partsupp`")
        exchange(distribution=hash[0], collation=[])
          runtimefilterbuilder(condition="runtime_filter_builder_[0](l_suppkey)")
            logicalview(tables="[0000-0003].lineitem_[00-15]", shardcount=16, sql="select `l_suppkey`, `l_linenumber`, `l_quantity` from `lineitem` as `lineitem`")


#测试生成bloomfilter，一部分下推到mysql, 一部分无法下推，保留在上面
- sql: |
    /*+TDDL:ENABLE_RUNTIME_FILTER=true BLOOM_FILTER_PROBE_MIN_ROW_COUNT=-1 FORCE_ENABLE_RUNTIME_FILTER=("p_partkey,s_nationkey,p_name,s_name") ENABLE_MPP=true*/
    select p_partkey, s_address, s_nationkey from part, supplier where p_partkey=s_nationkey and p_name=s_name
  plan: |
    project(p_partkey="p_partkey", s_address="s_address", s_nationkey="s_nationkey")
      hashjoin(condition="p_partkey = s_nationkey and p_name = s_name", type="inner")
        filter(condition="bloomfilter(p_name)")
          logicalview(tables="[0000-0003].part_[00-15]", shardcount=16, sql="select `p_partkey`, `p_name` from `part` as `part` where (bloomfilter(?, ?, ?, `p_partkey`))")
        exchange(distribution=broadcast, collation=[])
          runtimefilterbuilder(condition="runtime_filter_builder_[0](s_nationkey) and runtime_filter_builder_[1](s_name)")
            logicalview(tables="[0000-0003].supplier_[00-15]", shardcount=16, sql="select `s_name`, `s_address`, `s_nationkey` from `supplier` as `supplier`")
